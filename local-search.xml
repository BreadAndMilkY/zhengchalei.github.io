<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>测试驱动开发框架-Spock</title>
    <link href="/2022/03/16/%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6-Spock/"/>
    <url>/2022/03/16/%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6-Spock/</url>
    
    <content type="html"><![CDATA[<h2 id="文档地址"><a href="#文档地址" class="headerlink" title="文档地址"></a>文档地址</h2><p><a href="https://spockframework.org/spock/docs/2.1/">https://spockframework.org/spock/docs/2.1/</a></p><p>TODO 待补充</p>]]></content>
    
    
    
    <tags>
      
      <tag>Test</tag>
      
      <tag>TDD</tag>
      
      <tag>Spock</tag>
      
      <tag>Groovy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Guava-EventBus源码解析</title>
    <link href="/2022/03/16/Guava-EventBus%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2022/03/16/Guava-EventBus%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="Guava-EventBus-源码解析"><a href="#Guava-EventBus-源码解析" class="headerlink" title="Guava EventBus 源码解析"></a>Guava EventBus 源码解析</h2><ol><li>创建 EventBus 相关代码没啥好说的 比较简单</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EventBus</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EventBus</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;default&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EventBus</span><span class="hljs-params">(String identifier)</span> &#123;<br>        <span class="hljs-built_in">this</span>(<br>                identifier,<br>                MoreExecutors.directExecutor(),<br>                Dispatcher.perThreadDispatchQueue(),<br>                LoggingHandler.INSTANCE<br>        );<br>    &#125;<br><br>    EventBus(<br>            String identifier,<br>            Executor executor,<br>            Dispatcher dispatcher,<br>            SubscriberExceptionHandler exceptionHandler) &#123;<br>        <span class="hljs-built_in">this</span>.identifier = checkNotNull(identifier);<br>        <span class="hljs-built_in">this</span>.executor = checkNotNull(executor);<br>        <span class="hljs-built_in">this</span>.dispatcher = checkNotNull(dispatcher);<br>        <span class="hljs-built_in">this</span>.exceptionHandler = checkNotNull(exceptionHandler);<br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li>注册订阅 和 取消订阅</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// subscribers = </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EventBus</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册所有订户方法以接收 &#123;<span class="hljs-doctag">@code</span> object&#125; 事件.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object object whose subscriber methods should be registered.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(Object object)</span> &#123;<br>        subscribers.register(object);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 和上面类似 没啥好说的</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object 对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unregister</span><span class="hljs-params">(Object object)</span> &#123;<br>        subscribers.unregister(object);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubscriberRegistry</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(Object listener)</span> &#123;<br>        Multimap&lt;Class&lt;?&gt;, Subscriber&gt; listenerMethods = findAllSubscribers(listener);<br><br>        <span class="hljs-keyword">for</span> (Entry&lt;Class&lt;?&gt;, Collection&lt;Subscriber&gt;&gt; entry : listenerMethods.asMap().entrySet()) &#123;<br>            Class&lt;?&gt; eventType = entry.getKey();<br>            Collection&lt;Subscriber&gt; eventMethodsInListener = entry.getValue();<br><br>            <span class="hljs-comment">// 判断, 此消息类型是否第一次注册</span><br>            CopyOnWriteArraySet&lt;Subscriber&gt; eventSubscribers = subscribers.get(eventType);<br><br>            <span class="hljs-comment">// 第一次注册, 初始化信息</span><br>            <span class="hljs-keyword">if</span> (eventSubscribers == <span class="hljs-literal">null</span>) &#123;<br>                CopyOnWriteArraySet&lt;Subscriber&gt; newSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArraySet</span>&lt;&gt;();<br>                eventSubscribers =<br>                        MoreObjects.firstNonNull(subscribers.putIfAbsent(eventType, newSet), newSet);<br>            &#125;<br>            <span class="hljs-comment">// 添加到订阅</span><br>            eventSubscribers.addAll(eventMethodsInListener);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Multimap&lt;Class&lt;?&gt;, Subscriber&gt; findAllSubscribers(Object listener) &#123;<br>        <span class="hljs-comment">// 创建一个 Map</span><br>        <span class="hljs-comment">// multimap不存储重复的键值对。添加与现有键值对相等的新键值对没有效果。  键和值可能为null。支持所有可选的multimap方法，并且所有返回的视图都是可修改的。</span><br>        <span class="hljs-comment">// 当任何并发操作更新multimap时，此类不是线程安全的。如果最后一次写入，并发读取操作将正常工作发生-之前任何读数。</span><br>        Multimap&lt;Class&lt;?&gt;, Subscriber&gt; methodsInListener = HashMultimap.create();<br>        <span class="hljs-comment">// 获取注册进来的Class</span><br>        Class&lt;?&gt; clazz = listener.getClass();<br>        <span class="hljs-comment">// 获取方法</span><br>        <span class="hljs-keyword">for</span> (Method method : getAnnotatedMethods(clazz)) &#123;<br>            Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();<br>            <span class="hljs-comment">// 取第一个参数作为 EventBus 的入参类型匹配</span><br>            Class&lt;?&gt; eventType = parameterTypes[<span class="hljs-number">0</span>];<br>            <span class="hljs-comment">// 注册</span><br>            methodsInListener.put(eventType, Subscriber.create(bus, listener, method));<br>        &#125;<br>        <span class="hljs-keyword">return</span> methodsInListener;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>发送消息</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EventBus</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">post</span><span class="hljs-params">(Object event)</span> &#123;<br>        <span class="hljs-comment">//  根据消息类型, 获取注册的 Subscriber</span><br>        Iterator&lt;Subscriber&gt; eventSubscribers = subscribers.getSubscribers(event);<br>        <span class="hljs-keyword">if</span> (eventSubscribers.hasNext()) &#123;<br>            dispatcher.dispatch(event, eventSubscribers);<br>            <span class="hljs-comment">// 如果 无队列可消费, 递归等待队列</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!(event <span class="hljs-keyword">instanceof</span> DeadEvent)) &#123;<br>            <span class="hljs-comment">// the event had no subscribers and was not itself a DeadEvent</span><br>            post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DeadEvent</span>(<span class="hljs-built_in">this</span>, event));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dispatcher</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispatch</span><span class="hljs-params">(Object event, Iterator&lt;Subscriber&gt; subscribers)</span> &#123;<br>        checkNotNull(event);<br>        checkNotNull(subscribers);<br>        <span class="hljs-comment">// 获取队列</span><br>        Queue&lt;Event&gt; queueForThread = queue.get();<br>        <span class="hljs-comment">// 将消息添加到队列中</span><br>        queueForThread.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Event</span>(event, subscribers));<br><br>        <span class="hljs-keyword">if</span> (!dispatching.get()) &#123;<br>            dispatching.set(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Event nextEvent;<br>                <span class="hljs-comment">// 判断有消息</span><br>                <span class="hljs-keyword">while</span> ((nextEvent = queueForThread.poll()) != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 判断有消费者</span><br>                    <span class="hljs-keyword">while</span> (nextEvent.subscribers.hasNext()) &#123;<br>                        <span class="hljs-comment">// dispatchEvent, DirectExecutor.run </span><br>                        nextEvent.subscribers.next().dispatchEvent(nextEvent.event);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                dispatching.remove();<br>                queue.remove();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Subscriber</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispatchEvent</span><span class="hljs-params">(Object event)</span> &#123;<br>        executor.execute(<br>                <span class="hljs-comment">// Runner Lambda</span><br>                () -&gt; &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        invokeSubscriberMethod(event);<br>                        <span class="hljs-comment">// 这段就是 invoke 反射, 拿到注册进来的方法, 然后调用方法, 参数就是 post 传进来的</span><br>                        <span class="hljs-comment">//  method.invoke(target, checkNotNull(event));</span><br>                    &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>                        bus.handleSubscriberException(e.getCause(), context(event));<br>                    &#125;<br>                &#125;<br>        );<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="看个完整版的"><a href="#看个完整版的" class="headerlink" title="看个完整版的"></a>看个完整版的</h2><p>&#x2F;&#x2F; EventBus</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright (C) 2007 The Guava Authors</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except</span><br><span class="hljs-comment"> * in compliance with the License. You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software distributed under the License</span><br><span class="hljs-comment"> * is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express</span><br><span class="hljs-comment"> * or implied. See the License for the specific language governing permissions and limitations under</span><br><span class="hljs-comment"> * the License.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">package</span> com.google.common.eventbus;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.google.common.base.Preconditions.checkNotNull;<br><br><span class="hljs-keyword">import</span> com.google.common.base.MoreObjects;<br><span class="hljs-keyword">import</span> com.google.common.util.concurrent.MoreExecutors;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executor;<br><span class="hljs-keyword">import</span> java.util.logging.Level;<br><span class="hljs-keyword">import</span> java.util.logging.Logger;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Dispatches events to listeners, and provides ways for listeners to register themselves.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;h2&gt;Avoid EventBus&lt;/h2&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;&lt;b&gt;We recommend against using EventBus.&lt;/b&gt; It was designed many years ago, and newer</span><br><span class="hljs-comment"> * libraries offer better ways to decouple components and react to events.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;To decouple components, we recommend a dependency-injection framework. For Android code, most</span><br><span class="hljs-comment"> * apps use &lt;a href=&quot;https://dagger.dev&quot;&gt;Dagger&lt;/a&gt;. For server code, common options include &lt;a</span><br><span class="hljs-comment"> * href=&quot;https://github.com/google/guice/wiki/Motivation&quot;&gt;Guice&lt;/a&gt; and &lt;a</span><br><span class="hljs-comment"> * href=&quot;https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-introduction&quot;&gt;Spring&lt;/a&gt;.</span><br><span class="hljs-comment"> * Frameworks typically offer a way to register multiple listeners independently and then request</span><br><span class="hljs-comment"> * them together as a set (&lt;a href=&quot;https://dagger.dev/dev-guide/multibindings&quot;&gt;Dagger&lt;/a&gt;, &lt;a</span><br><span class="hljs-comment"> * href=&quot;https://github.com/google/guice/wiki/Multibindings&quot;&gt;Guice&lt;/a&gt;, &lt;a</span><br><span class="hljs-comment"> * href=&quot;https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-autowired-annotation&quot;&gt;Spring&lt;/a&gt;).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;To react to events, we recommend a reactive-streams framework like &lt;a</span><br><span class="hljs-comment"> * href=&quot;https://github.com/ReactiveX/RxJava/wiki&quot;&gt;RxJava&lt;/a&gt; (supplemented with its &lt;a</span><br><span class="hljs-comment"> * href=&quot;https://github.com/ReactiveX/RxAndroid&quot;&gt;RxAndroid&lt;/a&gt; extension if you are building for</span><br><span class="hljs-comment"> * Android) or &lt;a href=&quot;https://projectreactor.io/&quot;&gt;Project Reactor&lt;/a&gt;. (For the basics of</span><br><span class="hljs-comment"> * translating code from using an event bus to using a reactive-streams framework, see these two</span><br><span class="hljs-comment"> * guides: &lt;a href=&quot;https://blog.jkl.gg/implementing-an-event-bus-with-rxjava-rxbus/&quot;&gt;1&lt;/a&gt;, &lt;a</span><br><span class="hljs-comment"> * href=&quot;https://lorentzos.com/rxjava-as-event-bus-the-right-way-10a36bdd49ba&quot;&gt;2&lt;/a&gt;.) Some usages</span><br><span class="hljs-comment"> * of EventBus may be better written using &lt;a</span><br><span class="hljs-comment"> * href=&quot;https://kotlinlang.org/docs/coroutines-guide.html&quot;&gt;Kotlin coroutines&lt;/a&gt;, including &lt;a</span><br><span class="hljs-comment"> * href=&quot;https://kotlinlang.org/docs/flow.html&quot;&gt;Flow&lt;/a&gt; and &lt;a</span><br><span class="hljs-comment"> * href=&quot;https://kotlinlang.org/docs/channels.html&quot;&gt;Channels&lt;/a&gt;. Yet other usages are better served</span><br><span class="hljs-comment"> * by individual libraries that provide specialized support for particular use cases.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;Disadvantages of EventBus include:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;ul&gt;</span><br><span class="hljs-comment"> *   &lt;li&gt;It makes the cross-references between producer and subscriber harder to find. This can</span><br><span class="hljs-comment"> *       complicate debugging, lead to unintentional reentrant calls, and force apps to eagerly</span><br><span class="hljs-comment"> *       initialize all possible subscribers at startup time.</span><br><span class="hljs-comment"> *   &lt;li&gt;It uses reflection in ways that break when code is processed by optimizers/minimizers like</span><br><span class="hljs-comment"> *       &lt;a href=&quot;https://developer.android.com/studio/build/shrink-code&quot;&gt;R8 and Proguard&lt;/a&gt;.</span><br><span class="hljs-comment"> *   &lt;li&gt;It doesn&#x27;t offer a way to wait for multiple events before taking action. For example, it</span><br><span class="hljs-comment"> *       doesn&#x27;t offer a way to wait for multiple producers to all report that they&#x27;re &quot;ready,&quot; nor</span><br><span class="hljs-comment"> *       does it offer a way to batch multiple events from a single producer together.</span><br><span class="hljs-comment"> *   &lt;li&gt;It doesn&#x27;t support backpressure and other features needed for resilience.</span><br><span class="hljs-comment"> *   &lt;li&gt;It doesn&#x27;t provide much control of threading.</span><br><span class="hljs-comment"> *   &lt;li&gt;It doesn&#x27;t offer much monitoring.</span><br><span class="hljs-comment"> *   &lt;li&gt;It doesn&#x27;t propagate exceptions, so apps don&#x27;t have a way to react to them.</span><br><span class="hljs-comment"> *   &lt;li&gt;It doesn&#x27;t interoperate well with RxJava, coroutines, and other more commonly used</span><br><span class="hljs-comment"> *       alternatives.</span><br><span class="hljs-comment"> *   &lt;li&gt;It imposes requirements on the lifecycle of its subscribers. For example, if an event</span><br><span class="hljs-comment"> *       occurs between when one subscriber is removed and the next subscriber is added, the event</span><br><span class="hljs-comment"> *       is dropped.</span><br><span class="hljs-comment"> *   &lt;li&gt;Its performance is suboptimal, especially under Android.</span><br><span class="hljs-comment"> *   &lt;li&gt;It &lt;a href=&quot;https://github.com/google/guava/issues/1431&quot;&gt;doesn&#x27;t support parameterized</span><br><span class="hljs-comment"> *       types&lt;/a&gt;.</span><br><span class="hljs-comment"> *   &lt;li&gt;With the introduction of lambdas in Java 8, EventBus went from less verbose than listeners</span><br><span class="hljs-comment"> *       to &lt;a href=&quot;https://github.com/google/guava/issues/3311&quot;&gt;more verbose&lt;/a&gt;.</span><br><span class="hljs-comment"> * &lt;/ul&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;h2&gt;EventBus Summary&lt;/h2&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;The EventBus allows publish-subscribe-style communication between components without requiring</span><br><span class="hljs-comment"> * the components to explicitly register with one another (and thus be aware of each other). It is</span><br><span class="hljs-comment"> * designed exclusively to replace traditional Java in-process event distribution using explicit</span><br><span class="hljs-comment"> * registration. It is &lt;em&gt;not&lt;/em&gt; a general-purpose publish-subscribe system, nor is it intended</span><br><span class="hljs-comment"> * for interprocess communication.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;h2&gt;Receiving Events&lt;/h2&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;To receive events, an object should:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;ol&gt;</span><br><span class="hljs-comment"> *   &lt;li&gt;Expose a public method, known as the &lt;i&gt;event subscriber&lt;/i&gt;, which accepts a single</span><br><span class="hljs-comment"> *       argument of the type of event desired;</span><br><span class="hljs-comment"> *   &lt;li&gt;Mark it with a &#123;<span class="hljs-doctag">@link</span> Subscribe&#125; annotation;</span><br><span class="hljs-comment"> *   &lt;li&gt;Pass itself to an EventBus instance&#x27;s &#123;<span class="hljs-doctag">@link</span> #register(Object)&#125; method.</span><br><span class="hljs-comment"> * &lt;/ol&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;h2&gt;Posting Events&lt;/h2&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;To post an event, simply provide the event object to the &#123;<span class="hljs-doctag">@link</span> #post(Object)&#125; method. The</span><br><span class="hljs-comment"> * EventBus instance will determine the type of event and route it to all registered listeners.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;Events are routed based on their type &amp;mdash; an event will be delivered to any subscriber for</span><br><span class="hljs-comment"> * any type to which the event is &lt;em&gt;assignable.&lt;/em&gt; This includes implemented interfaces, all</span><br><span class="hljs-comment"> * superclasses, and all interfaces implemented by superclasses.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;When &#123;<span class="hljs-doctag">@code</span> post&#125; is called, all registered subscribers for an event are run in sequence, so</span><br><span class="hljs-comment"> * subscribers should be reasonably quick. If an event may trigger an extended process (such as a</span><br><span class="hljs-comment"> * database load), spawn a thread or queue it for later. (For a convenient way to do this, use an</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> AsyncEventBus&#125;.)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;h2&gt;Subscriber Methods&lt;/h2&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;Event subscriber methods must accept only one argument: the event.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;Subscribers should not, in general, throw. If they do, the EventBus will catch and log the</span><br><span class="hljs-comment"> * exception. This is rarely the right solution for error handling and should not be relied upon; it</span><br><span class="hljs-comment"> * is intended solely to help find problems during development.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;The EventBus guarantees that it will not call a subscriber method from multiple threads</span><br><span class="hljs-comment"> * simultaneously, unless the method explicitly allows it by bearing the &#123;<span class="hljs-doctag">@link</span></span><br><span class="hljs-comment"> * AllowConcurrentEvents&#125; annotation. If this annotation is not present, subscriber methods need not</span><br><span class="hljs-comment"> * worry about being reentrant, unless also called from outside the EventBus.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;h2&gt;Dead Events&lt;/h2&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;If an event is posted, but no registered subscribers can accept it, it is considered &quot;dead.&quot;</span><br><span class="hljs-comment"> * To give the system a second chance to handle dead events, they are wrapped in an instance of</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> DeadEvent&#125; and reposted.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;If a subscriber for a supertype of all events (such as Object) is registered, no event will</span><br><span class="hljs-comment"> * ever be considered dead, and no DeadEvents will be generated. Accordingly, while DeadEvent</span><br><span class="hljs-comment"> * extends &#123;<span class="hljs-doctag">@link</span> Object&#125;, a subscriber registered to receive any Object will never receive a</span><br><span class="hljs-comment"> * DeadEvent.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;This class is safe for concurrent use.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;See the Guava User Guide article on &lt;a</span><br><span class="hljs-comment"> * href=&quot;https://github.com/google/guava/wiki/EventBusExplained&quot;&gt;&#123;<span class="hljs-doctag">@code</span> EventBus&#125;&lt;/a&gt;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Cliff Biffle</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 10.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ElementTypesAreNonnullByDefault</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EventBus</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(EventBus.class.getName());<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String identifier;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Executor executor;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SubscriberExceptionHandler exceptionHandler;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SubscriberRegistry</span> <span class="hljs-variable">subscribers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubscriberRegistry</span>(<span class="hljs-built_in">this</span>);<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Dispatcher dispatcher;<br><br>  <span class="hljs-comment">/** Creates a new EventBus named &quot;default&quot;. */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">EventBus</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;default&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Creates a new EventBus with the given &#123;<span class="hljs-doctag">@code</span> identifier&#125;.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> identifier a brief name for this bus, for logging purposes. Should be a valid Java</span><br><span class="hljs-comment">   *     identifier.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">EventBus</span><span class="hljs-params">(String identifier)</span> &#123;<br>    <span class="hljs-built_in">this</span>(<br>        identifier,<br>        MoreExecutors.directExecutor(),<br>        Dispatcher.perThreadDispatchQueue(),<br>        LoggingHandler.INSTANCE);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Creates a new EventBus with the given &#123;<span class="hljs-doctag">@link</span> SubscriberExceptionHandler&#125;.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> exceptionHandler Handler for subscriber exceptions.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@since</span> 16.0</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">EventBus</span><span class="hljs-params">(SubscriberExceptionHandler exceptionHandler)</span> &#123;<br>    <span class="hljs-built_in">this</span>(<br>        <span class="hljs-string">&quot;default&quot;</span>,<br>        MoreExecutors.directExecutor(),<br>        Dispatcher.perThreadDispatchQueue(),<br>        exceptionHandler);<br>  &#125;<br><br>  EventBus(<br>      String identifier,<br>      Executor executor,<br>      Dispatcher dispatcher,<br>      SubscriberExceptionHandler exceptionHandler) &#123;<br>    <span class="hljs-built_in">this</span>.identifier = checkNotNull(identifier);<br>    <span class="hljs-built_in">this</span>.executor = checkNotNull(executor);<br>    <span class="hljs-built_in">this</span>.dispatcher = checkNotNull(dispatcher);<br>    <span class="hljs-built_in">this</span>.exceptionHandler = checkNotNull(exceptionHandler);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Returns the identifier for this event bus.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@since</span> 19.0</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">identifier</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> identifier;<br>  &#125;<br><br>  <span class="hljs-comment">/** Returns the default executor this event bus uses for dispatching events to subscribers. */</span><br>  <span class="hljs-keyword">final</span> Executor <span class="hljs-title function_">executor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> executor;<br>  &#125;<br><br>  <span class="hljs-comment">/** Handles the given exception thrown by a subscriber with the given context. */</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleSubscriberException</span><span class="hljs-params">(Throwable e, SubscriberExceptionContext context)</span> &#123;<br>    checkNotNull(e);<br>    checkNotNull(context);<br>    <span class="hljs-keyword">try</span> &#123;<br>      exceptionHandler.handleException(e, context);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable e2) &#123;<br>      <span class="hljs-comment">// if the handler threw an exception... well, just log it</span><br>      logger.log(<br>          Level.SEVERE,<br>          String.format(Locale.ROOT, <span class="hljs-string">&quot;Exception %s thrown while handling exception: %s&quot;</span>, e2, e),<br>          e2);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Registers all subscriber methods on &#123;<span class="hljs-doctag">@code</span> object&#125; to receive events.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> object object whose subscriber methods should be registered.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(Object object)</span> &#123;<br>    subscribers.register(object);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Unregisters all subscriber methods on a registered &#123;<span class="hljs-doctag">@code</span> object&#125;.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> object object whose subscriber methods should be unregistered.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> IllegalArgumentException if the object was not previously registered.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unregister</span><span class="hljs-params">(Object object)</span> &#123;<br>    subscribers.unregister(object);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Posts an event to all registered subscribers. This method will return successfully after the</span><br><span class="hljs-comment">   * event has been posted to all subscribers, and regardless of any exceptions thrown by</span><br><span class="hljs-comment">   * subscribers.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * &lt;p&gt;If no subscribers have been subscribed for &#123;<span class="hljs-doctag">@code</span> event&#125;&#x27;s class, and &#123;<span class="hljs-doctag">@code</span> event&#125; is not</span><br><span class="hljs-comment">   * already a &#123;<span class="hljs-doctag">@link</span> DeadEvent&#125;, it will be wrapped in a DeadEvent and reposted.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> event event to post.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">post</span><span class="hljs-params">(Object event)</span> &#123;<br>    Iterator&lt;Subscriber&gt; eventSubscribers = subscribers.getSubscribers(event);<br>    <span class="hljs-keyword">if</span> (eventSubscribers.hasNext()) &#123;<br>      dispatcher.dispatch(event, eventSubscribers);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!(event <span class="hljs-keyword">instanceof</span> DeadEvent)) &#123;<br>      <span class="hljs-comment">// the event had no subscribers and was not itself a DeadEvent</span><br>      post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DeadEvent</span>(<span class="hljs-built_in">this</span>, event));<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> MoreObjects.toStringHelper(<span class="hljs-built_in">this</span>).addValue(identifier).toString();<br>  &#125;<br><br>  <span class="hljs-comment">/** Simple logging handler for subscriber exceptions. */</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggingHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SubscriberExceptionHandler</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">LoggingHandler</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleException</span><span class="hljs-params">(Throwable exception, SubscriberExceptionContext context)</span> &#123;<br>      <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> logger(context);<br>      <span class="hljs-keyword">if</span> (logger.isLoggable(Level.SEVERE)) &#123;<br>        logger.log(Level.SEVERE, message(context), exception);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Logger <span class="hljs-title function_">logger</span><span class="hljs-params">(SubscriberExceptionContext context)</span> &#123;<br>      <span class="hljs-keyword">return</span> Logger.getLogger(EventBus.class.getName() + <span class="hljs-string">&quot;.&quot;</span> + context.getEventBus().identifier());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">message</span><span class="hljs-params">(SubscriberExceptionContext context)</span> &#123;<br>      <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> context.getSubscriberMethod();<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Exception thrown by subscriber method &quot;</span><br>          + method.getName()<br>          + <span class="hljs-string">&#x27;(&#x27;</span><br>          + method.getParameterTypes()[<span class="hljs-number">0</span>].getName()<br>          + <span class="hljs-string">&#x27;)&#x27;</span><br>          + <span class="hljs-string">&quot; on subscriber &quot;</span><br>          + context.getSubscriber()<br>          + <span class="hljs-string">&quot; when dispatching event: &quot;</span><br>          + context.getEvent();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&#x2F;&#x2F; Subscriber</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright (C) 2014 The Guava Authors</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except</span><br><span class="hljs-comment"> * in compliance with the License. You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software distributed under the License</span><br><span class="hljs-comment"> * is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express</span><br><span class="hljs-comment"> * or implied. See the License for the specific language governing permissions and limitations under</span><br><span class="hljs-comment"> * the License.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">package</span> com.google.common.eventbus;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.google.common.base.Preconditions.checkNotNull;<br><br><span class="hljs-keyword">import</span> com.google.common.annotations.VisibleForTesting;<br><span class="hljs-keyword">import</span> com.google.j2objc.annotations.Weak;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executor;<br><span class="hljs-keyword">import</span> javax.annotation.CheckForNull;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A subscriber method on a specific object, plus the executor that should be used for dispatching</span><br><span class="hljs-comment"> * events to it.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;Two subscribers are equivalent when they refer to the same method on the same object (not</span><br><span class="hljs-comment"> * class). This property is used to ensure that no subscriber method is registered more than once.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Colin Decker</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ElementTypesAreNonnullByDefault</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subscriber</span> &#123;<br><br>  <span class="hljs-comment">/** Creates a &#123;<span class="hljs-doctag">@code</span> Subscriber&#125; for &#123;<span class="hljs-doctag">@code</span> method&#125; on &#123;<span class="hljs-doctag">@code</span> listener&#125;. */</span><br>  <span class="hljs-keyword">static</span> Subscriber <span class="hljs-title function_">create</span><span class="hljs-params">(EventBus bus, Object listener, Method method)</span> &#123;<br>    <span class="hljs-keyword">return</span> isDeclaredThreadSafe(method)<br>        ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subscriber</span>(bus, listener, method)<br>        : <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronizedSubscriber</span>(bus, listener, method);<br>  &#125;<br><br>  <span class="hljs-comment">/** The event bus this subscriber belongs to. */</span><br>  <span class="hljs-meta">@Weak</span> <span class="hljs-keyword">private</span> EventBus bus;<br><br>  <span class="hljs-comment">/** The object with the subscriber method. */</span><br>  <span class="hljs-meta">@VisibleForTesting</span> <span class="hljs-keyword">final</span> Object target;<br><br>  <span class="hljs-comment">/** Subscriber method. */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Method method;<br><br>  <span class="hljs-comment">/** Executor to use for dispatching events to this subscriber. */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Executor executor;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">Subscriber</span><span class="hljs-params">(EventBus bus, Object target, Method method)</span> &#123;<br>    <span class="hljs-built_in">this</span>.bus = bus;<br>    <span class="hljs-built_in">this</span>.target = checkNotNull(target);<br>    <span class="hljs-built_in">this</span>.method = method;<br>    method.setAccessible(<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-built_in">this</span>.executor = bus.executor();<br>  &#125;<br><br>  <span class="hljs-comment">/** Dispatches &#123;<span class="hljs-doctag">@code</span> event&#125; to this subscriber using the proper executor. */</span><br>  <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispatchEvent</span><span class="hljs-params">(Object event)</span> &#123;<br>    executor.execute(<br>        () -&gt; &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            invokeSubscriberMethod(event);<br>          &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            bus.handleSubscriberException(e.getCause(), context(event));<br>          &#125;<br>        &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Invokes the subscriber method. This method can be overridden to make the invocation</span><br><span class="hljs-comment">   * synchronized.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@VisibleForTesting</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeSubscriberMethod</span><span class="hljs-params">(Object event)</span> <span class="hljs-keyword">throws</span> InvocationTargetException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      method.invoke(target, checkNotNull(event));<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Method rejected target/argument: &quot;</span> + event, e);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Method became inaccessible: &quot;</span> + event, e);<br>    &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>      <span class="hljs-keyword">if</span> (e.getCause() <span class="hljs-keyword">instanceof</span> Error) &#123;<br>        <span class="hljs-keyword">throw</span> (Error) e.getCause();<br>      &#125;<br>      <span class="hljs-keyword">throw</span> e;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/** Gets the context for the given event. */</span><br>  <span class="hljs-keyword">private</span> SubscriberExceptionContext <span class="hljs-title function_">context</span><span class="hljs-params">(Object event)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubscriberExceptionContext</span>(bus, event, target, method);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">31</span> + method.hashCode()) * <span class="hljs-number">31</span> + System.identityHashCode(target);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(<span class="hljs-meta">@CheckForNull</span> Object obj)</span> &#123;<br>    <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> Subscriber) &#123;<br>      <span class="hljs-type">Subscriber</span> <span class="hljs-variable">that</span> <span class="hljs-operator">=</span> (Subscriber) obj;<br>      <span class="hljs-comment">// Use == so that different equal instances will still receive events.</span><br>      <span class="hljs-comment">// We only guard against the case that the same object is registered</span><br>      <span class="hljs-comment">// multiple times</span><br>      <span class="hljs-type">return</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span>= that.target &amp;&amp; method.equals(that.method);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Checks whether &#123;<span class="hljs-doctag">@code</span> method&#125; is thread-safe, as indicated by the presence of the &#123;<span class="hljs-doctag">@link</span></span><br><span class="hljs-comment">   * AllowConcurrentEvents&#125; annotation.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDeclaredThreadSafe</span><span class="hljs-params">(Method method)</span> &#123;<br>    <span class="hljs-keyword">return</span> method.getAnnotation(AllowConcurrentEvents.class) != <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Subscriber that synchronizes invocations of a method to ensure that only one thread may enter</span><br><span class="hljs-comment">   * the method at a time.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@VisibleForTesting</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SynchronizedSubscriber</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Subscriber</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SynchronizedSubscriber</span><span class="hljs-params">(EventBus bus, Object target, Method method)</span> &#123;<br>      <span class="hljs-built_in">super</span>(bus, target, method);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeSubscriberMethod</span><span class="hljs-params">(Object event)</span> <span class="hljs-keyword">throws</span> InvocationTargetException &#123;<br>      <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        <span class="hljs-built_in">super</span>.invokeSubscriberMethod(event);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&#x2F;&#x2F; Dispatcher</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright (C) 2014 The Guava Authors</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except</span><br><span class="hljs-comment"> * in compliance with the License. You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software distributed under the License</span><br><span class="hljs-comment"> * is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express</span><br><span class="hljs-comment"> * or implied. See the License for the specific language governing permissions and limitations under</span><br><span class="hljs-comment"> * the License.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">package</span> com.google.common.eventbus;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.google.common.base.Preconditions.checkNotNull;<br><br><span class="hljs-keyword">import</span> com.google.common.collect.Queues;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Handler for dispatching events to subscribers, providing different event ordering guarantees that</span><br><span class="hljs-comment"> * make sense for different situations.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; The dispatcher is orthogonal to the subscriber&#x27;s &#123;<span class="hljs-doctag">@code</span> Executor&#125;. The dispatcher</span><br><span class="hljs-comment"> * controls the order in which events are dispatched, while the executor controls how (i.e. on which</span><br><span class="hljs-comment"> * thread) the subscriber is actually called when an event is dispatched to it.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Colin Decker</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ElementTypesAreNonnullByDefault</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dispatcher</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Returns a dispatcher that queues events that are posted reentrantly on a thread that is already</span><br><span class="hljs-comment">   * dispatching an event, guaranteeing that all events posted on a single thread are dispatched to</span><br><span class="hljs-comment">   * all subscribers in the order they are posted.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * &lt;p&gt;When all subscribers are dispatched to using a &lt;i&gt;direct&lt;/i&gt; executor (which dispatches on</span><br><span class="hljs-comment">   * the same thread that posts the event), this yields a breadth-first dispatch order on each</span><br><span class="hljs-comment">   * thread. That is, all subscribers to a single event A will be called before any subscribers to</span><br><span class="hljs-comment">   * any events B and C that are posted to the event bus by the subscribers to A.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">static</span> Dispatcher <span class="hljs-title function_">perThreadDispatchQueue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PerThreadQueuedDispatcher</span>();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Returns a dispatcher that queues events that are posted in a single global queue. This behavior</span><br><span class="hljs-comment">   * matches the original behavior of AsyncEventBus exactly, but is otherwise not especially useful.</span><br><span class="hljs-comment">   * For async dispatch, an &#123;<span class="hljs-doctag">@linkplain</span> #immediate() immediate&#125; dispatcher should generally be</span><br><span class="hljs-comment">   * preferable.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">static</span> Dispatcher <span class="hljs-title function_">legacyAsync</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LegacyAsyncDispatcher</span>();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Returns a dispatcher that dispatches events to subscribers immediately as they&#x27;re posted</span><br><span class="hljs-comment">   * without using an intermediate queue to change the dispatch order. This is effectively a</span><br><span class="hljs-comment">   * depth-first dispatch order, vs. breadth-first when using a queue.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">static</span> Dispatcher <span class="hljs-title function_">immediate</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> ImmediateDispatcher.INSTANCE;<br>  &#125;<br><br>  <span class="hljs-comment">/** Dispatches the given &#123;<span class="hljs-doctag">@code</span> event&#125; to the given &#123;<span class="hljs-doctag">@code</span> subscribers&#125;. */</span><br>  <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispatch</span><span class="hljs-params">(Object event, Iterator&lt;Subscriber&gt; subscribers)</span>;<br><br>  <span class="hljs-comment">/** Implementation of a &#123;<span class="hljs-doctag">@link</span> #perThreadDispatchQueue()&#125; dispatcher. */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PerThreadQueuedDispatcher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Dispatcher</span> &#123;<br><br>    <span class="hljs-comment">// This dispatcher matches the original dispatch behavior of EventBus.</span><br><br>    <span class="hljs-comment">/** Per-thread queue of events to dispatch. */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Queue&lt;Event&gt;&gt; queue =<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;Queue&lt;Event&gt;&gt;() &#123;<br>          <span class="hljs-meta">@Override</span><br>          <span class="hljs-keyword">protected</span> Queue&lt;Event&gt; <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> Queues.newArrayDeque();<br>          &#125;<br>        &#125;;<br><br>    <span class="hljs-comment">/** Per-thread dispatch state, used to avoid reentrant event dispatching. */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Boolean&gt; dispatching =<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;Boolean&gt;() &#123;<br>          <span class="hljs-meta">@Override</span><br>          <span class="hljs-keyword">protected</span> Boolean <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>          &#125;<br>        &#125;;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispatch</span><span class="hljs-params">(Object event, Iterator&lt;Subscriber&gt; subscribers)</span> &#123;<br>      checkNotNull(event);<br>      checkNotNull(subscribers);<br>      Queue&lt;Event&gt; queueForThread = queue.get();<br>      queueForThread.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Event</span>(event, subscribers));<br><br>      <span class="hljs-keyword">if</span> (!dispatching.get()) &#123;<br>        dispatching.set(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>          Event nextEvent;<br>          <span class="hljs-keyword">while</span> ((nextEvent = queueForThread.poll()) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">while</span> (nextEvent.subscribers.hasNext()) &#123;<br>              nextEvent.subscribers.next().dispatchEvent(nextEvent.event);<br>            &#125;<br>          &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>          dispatching.remove();<br>          queue.remove();<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Event</span> &#123;<br>      <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object event;<br>      <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Iterator&lt;Subscriber&gt; subscribers;<br><br>      <span class="hljs-keyword">private</span> <span class="hljs-title function_">Event</span><span class="hljs-params">(Object event, Iterator&lt;Subscriber&gt; subscribers)</span> &#123;<br>        <span class="hljs-built_in">this</span>.event = event;<br>        <span class="hljs-built_in">this</span>.subscribers = subscribers;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/** Implementation of a &#123;<span class="hljs-doctag">@link</span> #legacyAsync()&#125; dispatcher. */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LegacyAsyncDispatcher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Dispatcher</span> &#123;<br><br>    <span class="hljs-comment">// This dispatcher matches the original dispatch behavior of AsyncEventBus.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// We can&#x27;t really make any guarantees about the overall dispatch order for this dispatcher in</span><br>    <span class="hljs-comment">// a multithreaded environment for a couple reasons:</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// 1. Subscribers to events posted on different threads can be interleaved with each other</span><br>    <span class="hljs-comment">//    freely. (A event on one thread, B event on another could yield any of</span><br>    <span class="hljs-comment">//    [a1, a2, a3, b1, b2], [a1, b2, a2, a3, b2], [a1, b2, b3, a2, a3], etc.)</span><br>    <span class="hljs-comment">// 2. It&#x27;s possible for subscribers to actually be dispatched to in a different order than they</span><br>    <span class="hljs-comment">//    were added to the queue. It&#x27;s easily possible for one thread to take the head of the</span><br>    <span class="hljs-comment">//    queue, immediately followed by another thread taking the next element in the queue. That</span><br>    <span class="hljs-comment">//    second thread can then dispatch to the subscriber it took before the first thread does.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// All this makes me really wonder if there&#x27;s any value in queueing here at all. A dispatcher</span><br>    <span class="hljs-comment">// that simply loops through the subscribers and dispatches the event to each would actually</span><br>    <span class="hljs-comment">// probably provide a stronger order guarantee, though that order would obviously be different</span><br>    <span class="hljs-comment">// in some cases.</span><br><br>    <span class="hljs-comment">/** Global event queue. */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ConcurrentLinkedQueue&lt;EventWithSubscriber&gt; queue =<br>        Queues.newConcurrentLinkedQueue();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispatch</span><span class="hljs-params">(Object event, Iterator&lt;Subscriber&gt; subscribers)</span> &#123;<br>      checkNotNull(event);<br>      <span class="hljs-keyword">while</span> (subscribers.hasNext()) &#123;<br>        queue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventWithSubscriber</span>(event, subscribers.next()));<br>      &#125;<br><br>      EventWithSubscriber e;<br>      <span class="hljs-keyword">while</span> ((e = queue.poll()) != <span class="hljs-literal">null</span>) &#123;<br>        e.subscriber.dispatchEvent(e.event);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EventWithSubscriber</span> &#123;<br>      <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object event;<br>      <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Subscriber subscriber;<br><br>      <span class="hljs-keyword">private</span> <span class="hljs-title function_">EventWithSubscriber</span><span class="hljs-params">(Object event, Subscriber subscriber)</span> &#123;<br>        <span class="hljs-built_in">this</span>.event = event;<br>        <span class="hljs-built_in">this</span>.subscriber = subscriber;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/** Implementation of &#123;<span class="hljs-doctag">@link</span> #immediate()&#125;. */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImmediateDispatcher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Dispatcher</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ImmediateDispatcher</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImmediateDispatcher</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispatch</span><span class="hljs-params">(Object event, Iterator&lt;Subscriber&gt; subscribers)</span> &#123;<br>      checkNotNull(event);<br>      <span class="hljs-keyword">while</span> (subscribers.hasNext()) &#123;<br>        subscribers.next().dispatchEvent(event);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好像结束的有点快, 核心类</p><ol><li><code>EventBus</code> 看上去没那么重要</li><li><code>Subscriber</code></li><li><code>Dispatcher</code></li></ol><p>从某些角度来看, 代码加起来不超过400行, 果然精华!!!<br>从某些角度来看这些代码的 <code>Style</code>, emmmm 其实看不惯!</p>]]></content>
    
    
    
    <tags>
      
      <tag>EventBus</tag>
      
      <tag>Guava</tag>
      
      <tag>Bus</tag>
      
      <tag>Event</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot-GraphQL</title>
    <link href="/2022/03/15/SpringBoot-GraphQL/"/>
    <url>/2022/03/15/SpringBoot-GraphQL/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是-Graphql"><a href="#什么是-Graphql" class="headerlink" title="什么是 Graphql"></a>什么是 Graphql</h2><p>GraphQL 是一种针对 Graph（图状数据）进行查询特别有优势的 Query Language（查询语言），所以叫做 GraphQL。它跟 SQL 的关系是共用 QL 后缀，就好像「汉语」和「英语」共用后缀一样，但他们本质上是不同的语言。GraphQL 跟用作存储的 NoSQL 没有必然联系，虽然 GraphQL 背后的实际存储可以选择 NoSQL 类型的数据库，但也可以用 SQL 类型的数据库，或者任意其它存储方式（例如文本文件、存内存里等等）。</p><p>作者：Cat Chen<br>链接：<a href="https://www.zhihu.com/question/264629587/answer/949588861">https://www.zhihu.com/question/264629587/answer/949588861</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>强烈建议阅读完上面文章后再继续阅读本文章!!!!!!!!!</p><h2 id="SpringBoot-对-Graphql-的支持力度"><a href="#SpringBoot-对-Graphql-的支持力度" class="headerlink" title="SpringBoot 对 Graphql 的支持力度"></a>SpringBoot 对 Graphql 的支持力度</h2><p>目前: <code>Requires Spring Boot &gt;= 2.7.0.M1 and &lt; 3.0.0-M1.</code> , 其他请寻找第三方适配方案 或者 自行查找测试库</p><p><a href="https://www.youtube.com/watch?v=eVqmB2hsIVk">https://www.youtube.com/watch?v=eVqmB2hsIVk</a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p><code>SpringBoot 2.7.0-M2</code><br><code>org.projectlombok:lombok</code><br><code>spring-boot-starter-graphql</code><br><code>spring-boot-starter-data-mongodb-reactive</code><br><code>spring-boot-starter-webflux</code></p><p>这里细心的同学可能就注意到了: <code>spring-boot-starter-graphql</code>  前缀是 <code>spring-boot-starter</code> 所以是由 Spring 官方支持的</p><figure class="highlight groovy"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs groovy">plugins &#123;<br>    id <span class="hljs-string">&#x27;org.springframework.boot&#x27;</span> version <span class="hljs-string">&#x27;2.7.0-M2&#x27;</span><br>    id <span class="hljs-string">&#x27;io.spring.dependency-management&#x27;</span> version <span class="hljs-string">&#x27;1.0.11.RELEASE&#x27;</span><br>    id <span class="hljs-string">&#x27;java&#x27;</span><br>&#125;<br><br>group = <span class="hljs-string">&#x27;com.github.zhengchalei&#x27;</span><br>version = <span class="hljs-string">&#x27;0.0.1&#x27;</span><br>sourceCompatibility = <span class="hljs-string">&#x27;11&#x27;</span><br><br>repositories &#123;<br>    mavenCentral()<br>    maven &#123; url <span class="hljs-string">&#x27;https://repo.spring.io/milestone&#x27;</span> &#125;<br>    maven &#123; url <span class="hljs-string">&#x27;https://repo.spring.io/snapshot&#x27;</span> &#125;<br>&#125;<br><br>dependencies &#123;<br><span class="hljs-comment">//    runtimeOnly &#x27;com.h2database:h2&#x27;</span><br><span class="hljs-comment">//    runtimeOnly &#x27;io.r2dbc:r2dbc-h2&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-graphql&#x27;</span><br>    testImplementation <span class="hljs-string">&#x27;org.springframework.graphql:spring-graphql-test&#x27;</span><br><br>    implementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-data-mongodb-reactive&#x27;</span><br><br>    compileOnly <span class="hljs-string">&#x27;org.projectlombok:lombok&#x27;</span><br>    annotationProcessor <span class="hljs-string">&#x27;org.projectlombok:lombok&#x27;</span><br><br>    implementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-webflux&#x27;</span><br>    developmentOnly <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-devtools&#x27;</span><br>    testImplementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span><br>    testImplementation <span class="hljs-string">&#x27;io.projectreactor:reactor-test&#x27;</span><br>&#125;<br><br>tasks.named(<span class="hljs-string">&#x27;test&#x27;</span>) &#123;<br>    useJUnitPlatform()<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">spring.graphql.path</span>=<span class="hljs-string">/graphql</span><br><span class="hljs-attr">spring.graphql.websocket.path</span>=<span class="hljs-string">/graphql</span><br><br><span class="hljs-attr">spring.data.mongodb.host</span>=<span class="hljs-string">localhost</span><br><span class="hljs-attr">spring.data.mongodb.port</span>=<span class="hljs-string">27017</span><br><span class="hljs-attr">spring.data.mongodb.database</span>=<span class="hljs-string">test</span><br><span class="hljs-attr">spring.data.mongodb.username</span>=<span class="hljs-string">mongo</span><br><span class="hljs-attr">spring.data.mongodb.password</span>=<span class="hljs-string">mongo</span><br><span class="hljs-attr">spring.data.mongodb.authentication-database</span>=<span class="hljs-string">admin</span><br><br><span class="hljs-attr">logging.level.org.springframework.data.mongodb</span>=<span class="hljs-string">debug</span><br></code></pre></div></td></tr></table></figure><h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 作者</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 郑查磊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/03/14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Document(&quot;author&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span> &#123;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-meta">@Indexed(unique = true)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 书</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 郑查磊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/03/14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Document(&quot;book&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Indexed</span><br>    <span class="hljs-keyword">private</span> String authorId;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 作者库</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 郑查磊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/03/14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AuthorRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ReactiveMongoRepository</span>&lt;Author, String&gt; &#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 书籍库</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 郑查磊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/03/14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ReactiveMongoRepository</span>&lt;Book, String&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查找图书作者id</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> authorId 作者id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Flux&#125;&lt;&#123;<span class="hljs-doctag">@link</span> Book&#125;&gt;</span><br><span class="hljs-comment">     */</span><br>    Flux&lt;Book&gt; <span class="hljs-title function_">findBooksByAuthorId</span><span class="hljs-params">(String authorId)</span>;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="graphql"><a href="#graphql" class="headerlink" title="graphql"></a>graphql</h2><p>先在 <code>resources</code> 新建 <code>resources</code> 目录, 新建文件 <code>book.graphqls</code></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs graphql"># 定义查询<br>type Query &#123;<br>    findBooks: [Book]<br>    findAuthorsById(id: ID): Author<br>&#125;<br><br># 定义作者实体<br>type Author &#123;<br>    id: ID<br>    name: String<br>    # 关联多个书籍<br>    books: [Book]<br>&#125;<br><br># 定义书籍<br>type Book &#123;<br>    id: ID<br>    name: String<br>    authorId: ID<br>    # 这里只为了演示, 可嵌套<br>    author: Author<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Api"><a href="#Api" class="headerlink" title="Api"></a>Api</h2><p><code>BookResource</code> 与 <code>book.graphqls</code> 对应关系, 自行理解</p><p>表示不难. 这套表示方式, 是由 <code>Spring</code> 定义的, 个人觉得表现形式不是很好</p><p>由于 <code>Java</code> 是强类型, 导致对这种动态松散型表达力欠缺, 像 JS 或 Kotlin 会好很多</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.github.zhengchalei.domain.Author;<br><span class="hljs-keyword">import</span> com.github.zhengchalei.domain.Book;<br><span class="hljs-keyword">import</span> com.github.zhengchalei.repository.AuthorRepository;<br><span class="hljs-keyword">import</span> com.github.zhengchalei.repository.BookRepository;<br><span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.graphql.data.method.annotation.Argument;<br><span class="hljs-keyword">import</span> org.springframework.graphql.data.method.annotation.SchemaMapping;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Flux;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 书资源</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 郑查磊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/03/14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookResource</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AuthorRepository authorRepository;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BookRepository bookRepository;<br><br>    <span class="hljs-meta">@SchemaMapping(typeName = &quot;Query&quot;, field = &quot;findBooks&quot;)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;Book&gt; <span class="hljs-title function_">findBooks</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.bookRepository.findAll();<br>    &#125;<br><br>    <span class="hljs-meta">@SchemaMapping(typeName = &quot;Query&quot;, field = &quot;findAuthorsById&quot;)</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Author&gt; <span class="hljs-title function_">findAuthorsById</span><span class="hljs-params">(<span class="hljs-meta">@Argument</span> String id)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.authorRepository.findById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@SchemaMapping(typeName = &quot;Author&quot;)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;Book&gt; <span class="hljs-title function_">books</span><span class="hljs-params">(Author author)</span>  &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.bookRepository.findBooksByAuthorId(author.getId());<br>    &#125;<br><br>    <span class="hljs-meta">@SchemaMapping(typeName = &quot;Book&quot;)</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Author&gt; <span class="hljs-title function_">author</span><span class="hljs-params">(Book book)</span>  &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.authorRepository.findById(book.getAuthorId());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="初始化查询数据"><a href="#初始化查询数据" class="headerlink" title="初始化查询数据"></a>初始化查询数据</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.github.zhengchalei.domain.Author;<br><span class="hljs-keyword">import</span> com.github.zhengchalei.domain.Book;<br><span class="hljs-keyword">import</span> com.github.zhengchalei.repository.AuthorRepository;<br><span class="hljs-keyword">import</span> com.github.zhengchalei.repository.BookRepository;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Flux;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化数据</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 郑查磊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/03/15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InitData</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AuthorRepository authorRepository;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BookRepository bookRepository;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InitData</span><span class="hljs-params">(AuthorRepository authorRepository, BookRepository bookRepository)</span> &#123;<br>        <span class="hljs-built_in">this</span>.authorRepository = authorRepository;<br>        <span class="hljs-built_in">this</span>.bookRepository = bookRepository;<br>        init();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        create(<span class="hljs-string">&quot;曹雪芹&quot;</span>, <span class="hljs-string">&quot;红楼梦&quot;</span>, <span class="hljs-string">&quot;题敦诚琵琶行传奇&quot;</span>);<br>        create(<span class="hljs-string">&quot;吴承恩&quot;</span>, <span class="hljs-string">&quot;西游记&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span><span class="hljs-params">(String authorName, String... books)</span> &#123;<br>        <span class="hljs-type">Author</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>();<br>        author.setName(authorName);<br>        <span class="hljs-built_in">this</span>.authorRepository.save(author)<br>                .thenMany(<br>                        Flux<br>                                .just(books)<br>                                .map(name -&gt; &#123;<br>                                    <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>                                    book.setName(name);<br>                                    book.setAuthorId(author.getId());<br>                                    <span class="hljs-keyword">return</span> book;<br>                                &#125;)<br>                                .flatMap(bookRepository::save)<br>                )<br>                .subscribe();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>打开页面 <a href="http://localhost:8080/graphiql?path=/graphql&wsPath=/graphql">http://localhost:8080/graphiql?path=/graphql&wsPath=/graphql</a></p><p>可自行 删除或者新增条件 字段测试</p><p>查询过程中, 打开 Application log 注意观察日志, 看程序如何执行的</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs graphql">&#123;<br>  findAuthorsById(id: &quot;623076210179ae7cc2cc960b&quot;) &#123;<br>    id<br>    name<br>    books &#123;<br>      id<br>      name<br>    &#125;<br>  &#125;<br>  findBooks &#123;<br>    id<br>    name<br>    author &#123;<br>      id<br>      name<br>      books &#123;<br>        id<br>        name<br>      &#125;<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure><p>不出意外能得出以下结果, 注意 id 不同 查询条件变动</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;findAuthorsById&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;623076210179ae7cc2cc960b&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;曹雪芹&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;books&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;findBooks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;62307a341fc7cc64093fd942&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;红楼梦&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;62307a341fc7cc64093fd93f&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;曹雪芹&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;books&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;62307a341fc7cc64093fd942&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;红楼梦&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;62307a341fc7cc64093fd943&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;题敦诚琵琶行传奇&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;62307a341fc7cc64093fd941&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;西游记&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;62307a341fc7cc64093fd940&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;吴承恩&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;books&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;62307a341fc7cc64093fd941&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;西游记&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;62307a341fc7cc64093fd943&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;题敦诚琵琶行传奇&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;62307a341fc7cc64093fd93f&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;曹雪芹&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;books&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;62307a341fc7cc64093fd942&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;红楼梦&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;62307a341fc7cc64093fd943&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;题敦诚琵琶行传奇&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://developer.okta.com/blog/2018/09/24/reactive-apis-with-spring-webflux">reactive-apis-with-spring-webflux</a></li><li><a href="https://developer.okta.com/blog/2018/09/25/spring-webflux-websockets-react">spring-webflux-websockets-react</a></li><li><a href="https://www.youtube.com/watch?v=eVqmB2hsIVk">Spring Tips: @Controllers: GraphQL</a></li></ol><h2 id="Github-Repository"><a href="#Github-Repository" class="headerlink" title="Github Repository"></a>Github Repository</h2><p><a href="https://github.com/zhengchalei/springboot-graphql">SpringBoot-GraphQL</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>GraphQL</tag>
      
      <tag>WebFlux</tag>
      
      <tag>Reactive</tag>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringEl+Aop实现复杂的注解权限表达式</title>
    <link href="/2022/03/11/SpringEl+Aop%E5%AE%9E%E7%8E%B0%E5%A4%8D%E6%9D%82%E7%9A%84%E6%B3%A8%E8%A7%A3%E6%9D%83%E9%99%90%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2022/03/11/SpringEl+Aop%E5%AE%9E%E7%8E%B0%E5%A4%8D%E6%9D%82%E7%9A%84%E6%B3%A8%E8%A7%A3%E6%9D%83%E9%99%90%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>什么是<code>SpringEl</code>, 翻译自 <a href="https://docs.spring.io/spring-framework/docs/5.3.9/reference/html/core.html#spring-core">https://docs.spring.io/spring-framework/docs/5.3.9/reference/html/core.html#spring-core</a><br>Spring Expression Language（简称SpEL）是一种强大的表达式语言，支持在运行时查询和操作对象图。语言语法类似于 Unified EL，但提供了额外的功能，最值得注意的是方法调用和基本的字符串模板功能。</p><p>虽然还有其他几种可用的 Java 表达式语言，OGNL、MVEL 和 JBoss EL 等等，但创建 Spring 表达式语言的目的是为 Spring 社区提供一种受良好支持的表达式语言，该语言可以在所有产品中使用春季投资组合。它的语言特性由 Spring 产品组合中的项目需求驱动，包括基于 Eclipse 的 SpringSource 工具套件中代码完成支持的工具需求。也就是说，SpEL 基于与技术无关的 API，允许在需要时集成其他表达式语言实现。</p><p>虽然 SpEL 是 Spring 产品组合中表达式评估的基础，但它不直接与 Spring 绑定，可以独立使用。为了自成一体，本章中的许多示例都使用 SpEL，就好像它是一种独立的表达语言一样。这需要创建一些引导基础设施类，例如解析器。大多数 Spring 用户不需要处理这个基础设施，而是只编写表达式字符串进行评估。这种典型用途的一个示例是将 SpEL 集成到创建 XML 或基于注释的 bean 定义中，如用于定义 bean 定义的表达式支持部分所示。</p><p>本章介绍了表达式语言的特性、它的 API 和它的语言语法。在一些地方，Inventor 和 Inventor’s Society 类被用作表达式评估的目标对象。这些类声明和用于填充它们的数据在本章末尾列出。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><ol><li><p>添加依赖</p><figure class="highlight groovy"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs groovy">dependencies &#123;<br>    implementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-aop&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span><br>    compileOnly <span class="hljs-string">&#x27;org.projectlombok:lombok&#x27;</span><br>    annotationProcessor <span class="hljs-string">&#x27;org.projectlombok:lombok&#x27;</span><br>    testImplementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>开始编码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 鉴权注解</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 郑查磊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/03/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Auth &#123;<br><br>    String <span class="hljs-title function_">checkRole</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkIsAdmin</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 表达式</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> stone</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/03/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoleExpression</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserContext userContext;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RoleExpression</span><span class="hljs-params">(UserContext userContext)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userContext = userContext;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断是否包含角色</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> role 角色</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> boolean</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasRole</span><span class="hljs-params">(String role)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.userContext.getRoles().contains(role);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检查是否为管理员</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> boolean</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkIsAdmin</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.userContext.getRoles().contains(<span class="hljs-string">&quot;admin&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户上下文</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 假设这里存储的是登录了用户的信息, 依据实际情况做判断即可</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 郑查磊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/03/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserContext</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; roles = List.of(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;it manager&quot;</span>);<br><br>&#125;<br><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * el上下文配置</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 郑查磊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/03/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ElContextConfiguration</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 表达式解析器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> SpelExpressionParser&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SpelExpressionParser <span class="hljs-title function_">spelExpressionParser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Standard 上下文</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> applicationContext 应用程序上下文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> StandardEvaluationContext&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> StandardEvaluationContext <span class="hljs-title function_">standardEvaluationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> &#123;<br>        <span class="hljs-type">StandardEvaluationContext</span> <span class="hljs-variable">standardEvaluationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardEvaluationContext</span>();<br>        <span class="hljs-comment">// 如果不设置这一步 只能使用基础解析, 设置后 可使用 @beanName.func(参数) 调用</span><br>        standardEvaluationContext.setBeanResolver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanFactoryResolver</span>(applicationContext));<br>        <span class="hljs-keyword">return</span> standardEvaluationContext;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * auth aop</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 郑查磊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/03/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthAop</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StandardEvaluationContext standardEvaluationContext;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RoleExpression roleExpression;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AuthAop</span><span class="hljs-params">(StandardEvaluationContext standardEvaluationContext, RoleExpression roleExpression)</span> &#123;<br>        <span class="hljs-built_in">this</span>.standardEvaluationContext = standardEvaluationContext;<br>        <span class="hljs-built_in">this</span>.roleExpression = roleExpression;<br>    &#125;<br><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(com.github.zhengchalei.spring.el.annotations.Auth)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointcut</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;pointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class="hljs-comment">// 方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> signature.getMethod();<br>        <span class="hljs-comment">// 获取 auth func</span><br>        <span class="hljs-type">Auth</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> method.getAnnotation(Auth.class);<br>        &#123;<br>            <span class="hljs-comment">// 获取注解内字符串</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">checkRole</span> <span class="hljs-operator">=</span> annotation.checkRole();<br>            <span class="hljs-keyword">if</span> (!checkRole.isBlank()) &#123;<br>                <span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>().parseExpression(checkRole);<br>                <span class="hljs-comment">// EvaluationContext context, @Nullable Object rootObject, @Nullable Class&lt;T&gt; desiredResultType</span><br>                <span class="hljs-comment">// context 上下文, rootObject 设置后可以直接调用方法名, desiredResultType 返回值类型</span><br>                <span class="hljs-type">Boolean</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> expression.getValue(<span class="hljs-built_in">this</span>.standardEvaluationContext, <span class="hljs-built_in">this</span>.roleExpression, Boolean.class);<br>                log.info(<span class="hljs-string">&quot;正在检查角色是否满足条件, 结果: &#123;&#125;&quot;</span>, value);<br>                <span class="hljs-keyword">if</span> (!Boolean.TRUE.equals(value)) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;权限不足!&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> annotation.checkIsAdmin();<br>            <span class="hljs-keyword">if</span> (b) &#123;<br>                <span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>().parseExpression(<span class="hljs-string">&quot;checkIsAdmin()&quot;</span>);<br>                <span class="hljs-comment">// EvaluationContext context, @Nullable Object rootObject, @Nullable Class&lt;T&gt; desiredResultType</span><br>                <span class="hljs-comment">// context 上下文, rootObject 设置后可以直接调用方法名, desiredResultType 返回值类型</span><br>                <span class="hljs-type">Boolean</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> expression.getValue(<span class="hljs-built_in">this</span>.standardEvaluationContext, <span class="hljs-built_in">this</span>.roleExpression, Boolean.class);<br>                log.info(<span class="hljs-string">&quot;正在检查是否为管理员, 结果: &#123;&#125;&quot;</span>, value);<br>                <span class="hljs-keyword">if</span> (!Boolean.TRUE.equals(value)) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;不是Admin!&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> joinPoint.proceed();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * book api</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 郑查磊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/03/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br><br>    <span class="hljs-meta">@Auth(checkRole = &quot;hasRole(&#x27;admin&#x27;) &quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/f1&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">fun1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> LocalDateTime.now().toString();<br>    &#125;<br><br>    <span class="hljs-meta">@Auth(checkRole = &quot;hasRole(&#x27;admin&#x27;) or hasRole(&#x27;user&#x27;)&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/f2&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">fun2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> LocalDateTime.now().toString();<br>    &#125;<br><br>    <span class="hljs-meta">@Auth(checkRole = &quot;hasRole(&#x27;admin&#x27;) and hasRole(&#x27;user&#x27;)&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/f3&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">fun3</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> LocalDateTime.now().toString();<br>    &#125;<br><br>    <span class="hljs-meta">@Auth(checkRole = &quot;hasRole(&#x27;admin&#x27;) or hasRole(&#x27;user&#x27;)&quot;, checkIsAdmin = true)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/f4&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">fun4</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> LocalDateTime.now().toString();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>总结<br>GitHub: <a href="https://github.com/zhengchalei/spring-el">https://github.com/zhengchalei/spring-el</a><br>对于 Spring El 的优点在于 动态解析的表达式<br>可以代替一部分代码的编写, 简化操作步骤</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>El</tag>
      
      <tag>Security</tag>
      
      <tag>Aop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot2.6.x Swagger3.0 启动错误</title>
    <link href="/2022/03/11/SpringBoot2-6-x-Swagger-%E6%97%A0%E6%B3%95%E6%89%AB%E6%8F%8F/"/>
    <url>/2022/03/11/SpringBoot2-6-x-Swagger-%E6%97%A0%E6%B3%95%E6%89%AB%E6%8F%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="如下错误信息"><a href="#如下错误信息" class="headerlink" title="如下错误信息:"></a>如下错误信息:</h2><figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smali">1. Failed to start bean &#x27;documentationPluginsBootstrapper&#x27;; nested exception is java.lang.NullPointerException: Cannot<span class="hljs-built_in"> invoke </span><span class="hljs-string">&quot;org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.getPatterns()&quot;</span> because <span class="hljs-string">&quot;this.condition&quot;</span> is null<br>2. java.lang.NullPointerException: Cannot<span class="hljs-built_in"> invoke </span><span class="hljs-string">&quot;org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.getPatterns()&quot;</span> because <span class="hljs-string">&quot;this.condition&quot;</span> is null<br>3. org.springframework.context.ApplicationContextException: Failed to start bean ‘documentationPluginsBootstrapper’; nested exception is java.lang.NullPointerException<br></code></pre></div></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>修改SpringMvc路由匹配规则, 但是从某些角度来思考不优雅且不可使用 <code>Spring Boot Actuator</code><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">spring.mvc.pathmatch.matching-strategy</span>=<span class="hljs-string">ant_path_matcher</span><br></code></pre></div></td></tr></table></figure></li><li>修改 SpringFox<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebMvcEndpointHandlerMapping <span class="hljs-title function_">webEndpointServletHandlerMapping</span><span class="hljs-params">(WebEndpointsSupplier webEndpointsSupplier, ServletEndpointsSupplier servletEndpointsSupplier, ControllerEndpointsSupplier controllerEndpointsSupplier, EndpointMediaTypes endpointMediaTypes, CorsEndpointProperties corsProperties, WebEndpointProperties webEndpointProperties, Environment environment)</span> &#123;<br>        List&lt;ExposableEndpoint&lt;?&gt;&gt; allEndpoints = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        Collection&lt;ExposableWebEndpoint&gt; webEndpoints = webEndpointsSupplier.getEndpoints();<br>        allEndpoints.addAll(webEndpoints);<br>        allEndpoints.addAll(servletEndpointsSupplier.getEndpoints());<br>        allEndpoints.addAll(controllerEndpointsSupplier.getEndpoints());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">basePath</span> <span class="hljs-operator">=</span> webEndpointProperties.getBasePath();<br>        <span class="hljs-type">EndpointMapping</span> <span class="hljs-variable">endpointMapping</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EndpointMapping</span>(basePath);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">shouldRegisterLinksMapping</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.shouldRegisterLinksMapping(webEndpointProperties, environment, basePath);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcEndpointHandlerMapping</span>(endpointMapping, webEndpoints, endpointMediaTypes, corsProperties.toCorsConfiguration(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">EndpointLinksResolver</span>(allEndpoints, basePath), shouldRegisterLinksMapping, <span class="hljs-literal">null</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldRegisterLinksMapping</span><span class="hljs-params">(WebEndpointProperties webEndpointProperties, Environment environment, String basePath)</span> &#123;<br>        <span class="hljs-keyword">return</span> webEndpointProperties.getDiscovery().isEnabled() &amp;&amp; (StringUtils.hasText(basePath) || ManagementPortType.get(environment).equals(ManagementPortType.DIFFERENT));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>修改 SpringFox 过滤源码, 复制一份 Class 到 Project, 然后记住包路径也要修改, 由于内容太过硬核, 不推荐<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">WebMvcRequestHandlerProvider</span><span class="hljs-params">(Optional&lt;ServletContext&gt; servletContext, HandlerMethodResolver methodResolver,</span><br><span class="hljs-params">List&lt;RequestMappingInfoHandlerMapping&gt; handlerMappings)</span> &#123;<br><span class="hljs-built_in">this</span>.handlerMappings = handlerMappings.stream().filter(mapping -&gt; mapping.getPatternParser() == <span class="hljs-literal">null</span>)<br>.collect(Collectors.toList());<br></code></pre></div></td></tr></table></figure></li><li>替换位 SpringDoc <a href="https://springdoc.org/#migrating-from-springfox">https://springdoc.org/#migrating-from-springfox</a><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  native 版本 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-native<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  如果用的SpringSecurity 还可以带上下面这个 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>last.version<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringDocConfiguration</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * GroupedOpenApi</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> OpenAPI</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> GroupedOpenApi <span class="hljs-title function_">publicApi</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> GroupedOpenApi.builder()<br>                .group(<span class="hljs-string">&quot;springshop-public&quot;</span>)<br>                .pathsToMatch(<span class="hljs-string">&quot;/public/**&quot;</span>)<br>                .build();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 复杂版</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> OpenAPI</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> OpenAPI <span class="hljs-title function_">springShopOpenAPI</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenAPI</span>()<br>                .info(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>().title(<span class="hljs-string">&quot;SpringShop API&quot;</span>)<br>                        .description(<span class="hljs-string">&quot;Spring shop sample application&quot;</span>)<br>                        .version(<span class="hljs-string">&quot;v0.0.1&quot;</span>)<br>                        .license(<span class="hljs-keyword">new</span> <span class="hljs-title class_">License</span>().name(<span class="hljs-string">&quot;Apache 2.0&quot;</span>).url(<span class="hljs-string">&quot;http://springdoc.org&quot;</span>)))<br>                .externalDocs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExternalDocumentation</span>()<br>                        .description(<span class="hljs-string">&quot;SpringShop Wiki Documentation&quot;</span>)<br>                        .url(<span class="hljs-string">&quot;https://springshop.wiki.github.org/docs&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>第一种, 如果项目没有使用到 <code>Actuator</code> 是最简单的解决方案.<br>第二种, 推荐, 挺简单<br>第三种, 有点硬核,  不是很推荐<br>第四种, 新项目最优解决方案, Spring 全家桶万岁!</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
